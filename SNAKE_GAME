{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "eb2a8ff0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Whiskers\n",
      "cat\n",
      "Persian\n",
      "Meow\n"
     ]
    }
   ],
   "source": [
    "class Animal:\n",
    "    def __init__(self, name, species):\n",
    "        self.name = name\n",
    "        self.species = species\n",
    "\n",
    "    def make_sound(self):\n",
    "        print(\"Generic animal sound\")\n",
    "\n",
    "class Cat(Animal):\n",
    "    def __init__(self, name, breed):\n",
    "        super().__init__(name, species=\"cat\")\n",
    "        self.breed = breed\n",
    "\n",
    "    def make_sound(self):\n",
    "        print(\"Meow\")\n",
    "\n",
    "c = Cat(\"Whiskers\", \"Persian\")\n",
    "print(c.name)     # \"Whiskers\"\n",
    "print(c.species)  # \"cat\"\n",
    "print(c.breed)    # \"Persian\"\n",
    "c.make_sound()    # \"Meow\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15c093ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 2.3.0 (SDL 2.24.2, Python 3.9.12)\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n"
     ]
    }
   ],
   "source": [
    "import pygame\n",
    "import random\n",
    "\n",
    "# Initialize the game\n",
    "pygame.init()\n",
    "\n",
    "# Set up the screen\n",
    "width, height = 640, 480\n",
    "screen = pygame.display.set_mode((width, height))\n",
    "pygame.display.set_caption(\"Snake Game\")\n",
    "\n",
    "# Define colors\n",
    "BLACK = (0, 0, 0)\n",
    "GREEN = (0, 255, 0)\n",
    "RED = (255, 0, 0)\n",
    "\n",
    "# Define the snake and food size\n",
    "snake_size = 20\n",
    "food_size = 20\n",
    "\n",
    "# Initialize the snake position and movement\n",
    "snake_x = width // 2\n",
    "snake_y = height // 2\n",
    "snake_dx = 0\n",
    "snake_dy = 0\n",
    "\n",
    "# Initialize the food position\n",
    "food_x = random.randint(0, (width - food_size) // food_size) * food_size\n",
    "food_y = random.randint(0, (height - food_size) // food_size) * food_size\n",
    "\n",
    "# Set up the clock\n",
    "clock = pygame.time.Clock()\n",
    "\n",
    "# Game loop\n",
    "running = True\n",
    "while running:\n",
    "    # Handle events\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            running = False\n",
    "        elif event.type == pygame.KEYDOWN:\n",
    "            if event.key == pygame.K_UP:\n",
    "                snake_dy = -snake_size\n",
    "                snake_dx = 0\n",
    "            elif event.key == pygame.K_DOWN:\n",
    "                snake_dy = snake_size\n",
    "                snake_dx = 0\n",
    "            elif event.key == pygame.K_LEFT:\n",
    "                snake_dx = -snake_size\n",
    "                snake_dy = 0\n",
    "            elif event.key == pygame.K_RIGHT:\n",
    "                snake_dx = snake_size\n",
    "                snake_dy = 0\n",
    "\n",
    "    # Update snake position\n",
    "    snake_x += snake_dx\n",
    "    snake_y += snake_dy\n",
    "\n",
    "    # Check collision with boundaries\n",
    "    if snake_x < 0 or snake_x >= width or snake_y < 0 or snake_y >= height:\n",
    "        running = False\n",
    "\n",
    "    # Check collision with food\n",
    "    if snake_x == food_x and snake_y == food_y:\n",
    "        # Generate new food position\n",
    "        food_x = random.randint(0, (width - food_size) // food_size) * food_size\n",
    "        food_y = random.randint(0, (height - food_size) // food_size) * food_size\n",
    "\n",
    "    # Clear the screen\n",
    "    screen.fill(BLACK)\n",
    "\n",
    "    # Draw the snake and food\n",
    "    pygame.draw.rect(screen, GREEN, (snake_x, snake_y, snake_size, snake_size))\n",
    "    pygame.draw.rect(screen, RED, (food_x, food_y, food_size, food_size))\n",
    "\n",
    "    # Update the display\n",
    "    pygame.display.flip()\n",
    "\n",
    "    # Set the game speed\n",
    "    clock.tick(10)\n",
    "\n",
    "# Quit the game\n",
    "pygame.quit()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8af9d8a9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
